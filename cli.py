"""CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –°–ó–ì–ú–£ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º click."""

import asyncio
import sys
from pathlib import Path
from typing import Optional

import click
from rich.console import Console
from rich.table import Table
from rich import print as rprint

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from schedule_processor.yaml_config import get_config
from schedule_processor.api import get_available_filters, search_schedules

console = Console()


@click.group()
@click.version_option(version="2.0.0", prog_name="szgmu-schedule")
def cli():
    """üéì CLI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –°–ó–ì–ú–£"""
    pass


@cli.command()
@click.option('--config', '-c', type=click.Path(exists=True), 
              help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML')
def config_test(config: Optional[str]):
    """üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        if config:
            from schedule_processor.yaml_config import reload_config
            cfg = reload_config(config)
        else:
            cfg = get_config()
        
        rprint("‚úÖ [green]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ[/green]")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        table = Table(title="üìã –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
        rings = cfg.get_rings()
        table.add_row("–°–µ–º–∏–Ω–∞—Ä—ã (–ø–∞—Ä)", str(len(rings.get('—Å', []))))
        table.add_row("–õ–µ–∫—Ü–∏–∏ (–ø–∞—Ä)", str(len(rings.get('–ª', []))))
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        api_config = cfg.get_api_config()
        table.add_row("API URL", api_config.get('base_url', '–Ω–µ —É–∫–∞–∑–∞–Ω'))
        table.add_row("–¢–∞–π–º–∞—É—Ç", f"{api_config.get('timeout', 30)}—Å")
        
        # –≠–º–æ–¥–∑–∏
        bot_config = cfg.get_bot_config()
        emojis = bot_config.get('emojis', {})
        table.add_row("–≠–º–æ–¥–∑–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", str(len(emojis)))
        
        console.print(table)
        
    except Exception as e:
        rprint(f"‚ùå [red]–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:[/red] {e}")
        sys.exit(1)


@cli.command()
async def filters():
    """üîç –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ API"""
    try:
        rprint("‚è≥ [yellow]–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã...[/yellow]")
        available_filters = await get_available_filters()
        
        if not available_filters:
            rprint("‚ùå [red]–§–∏–ª—å—Ç—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã[/red]")
            return
        
        table = Table(title="üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        table.add_column("–§–∏–ª—å—Ç—Ä", style="cyan")
        table.add_column("–û–ø—Ü–∏–∏", style="green")
        table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", justify="right", style="magenta")
        
        for filter_name, options in available_filters.items():
            options_str = ", ".join(options[:3])
            if len(options) > 3:
                options_str += f"... (+{len(options) - 3})"
            
            table.add_row(filter_name, options_str, str(len(options)))
        
        console.print(table)
        rprint(f"‚úÖ [green]–ü–æ–ª—É—á–µ–Ω–æ {len(available_filters)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤[/green]")
        
    except Exception as e:
        rprint(f"‚ùå [red]–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:[/red] {e}")
        sys.exit(1)


@cli.command()
@click.option('--course', '-k', help='–ö—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è')
@click.option('--specialty', '-s', help='–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å')
@click.option('--stream', '-t', help='–ü–æ—Ç–æ–∫ (–∞, –±, –≤, –≥)')
@click.option('--semester', '-e', help='–°–µ–º–µ—Å—Ç—Ä (–æ—Å–µ–Ω–Ω–∏–π, –≤–µ—Å–µ–Ω–Ω–∏–π)')
@click.option('--limit', '-l', default=10, help='–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
async def search(course: Optional[str], specialty: Optional[str], 
                stream: Optional[str], semester: Optional[str], limit: int):
    """üîç –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = {}
    if course:
        filters["–ö—É—Ä—Å"] = [course]
    if specialty:
        filters["–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"] = [specialty]
    if stream:
        filters["–ü–æ—Ç–æ–∫"] = [stream]
    if semester:
        filters["–°–µ–º–µ—Å—Ç—Ä"] = [semester]
    
    if not filters:
        rprint("‚ö†Ô∏è [yellow]–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ?[/yellow]")
        if not click.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            return
    
    try:
        rprint("‚è≥ [yellow]–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...[/yellow]")
        results = await search_schedules(filters)
        
        if not results:
            rprint("‚ùå [red]–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/red]")
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = results[:limit]
        
        table = Table(title="üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        table.add_column("‚Ññ", justify="right", style="cyan")
        table.add_column("ID", justify="right", style="dim")
        table.add_column("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", style="green")
        table.add_column("–ö—É—Ä—Å", justify="center", style="blue")
        table.add_column("–ü–æ—Ç–æ–∫", justify="center", style="magenta")
        table.add_column("–°–µ–º–µ—Å—Ç—Ä", style="yellow")
        table.add_column("–§–∞–π–ª", style="dim")
        
        for i, result in enumerate(results, 1):
            data = result.get('data', {})
            lessons = data.get('scheduleLessonDtoList', [])
            
            if lessons:
                lesson = lessons[0]
                specialty = lesson.get('speciality', 'Unknown')[:40]
                course = str(lesson.get('courseNumber', '?'))
                stream = lesson.get('groupStream', '?')
                semester = lesson.get('semester', '?')
            else:
                specialty = course = stream = semester = "Unknown"
            
            filename = data.get('fileName', 'Unknown')
            schedule_id = result.get('id', 'Unknown')
            
            table.add_row(
                str(i), str(schedule_id), specialty, 
                course, stream, semester, filename[:30]
            )
        
        console.print(table)
        rprint(f"‚úÖ [green]–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π[/green]")
        
    except Exception as e:
        rprint(f"‚ùå [red]–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:[/red] {e}")
        sys.exit(1)


@cli.command()
@click.option('--schedule-id', '-i', type=int, required=True, help='ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
@click.option('--subgroup', '-g', required=True, help='–ü–æ–¥–≥—Ä—É–ø–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 201–∞)')
@click.option('--format', '-f', type=click.Choice(['xlsx', 'ics']), 
              default='xlsx', help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
@click.option('--output', '-o', help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞')
async def generate(schedule_id: int, subgroup: str, format: str, output: Optional[str]):
    """üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º v3 –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ –±–æ—Ç–µ)
        rprint(f"‚è≥ [yellow]–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {format.upper()} —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã {subgroup}...[/yellow]")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ schedule_processor
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        output_dir = Path(output) if output else Path("output")
        output_dir.mkdir(exist_ok=True)
        
        filename = f"{subgroup}.{format}"
        output_file = output_dir / filename
        
        rprint(f"‚úÖ [green]–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:[/green] {output_file}")
        
    except Exception as e:
        rprint(f"‚ùå [red]–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:[/red] {e}")
        sys.exit(1)


@cli.command()
def bot():
    """ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        rprint("üöÄ [green]–ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...[/green]")
        from bot_main import main
        asyncio.run(main())
    except Exception as e:
        rprint(f"‚ùå [red]–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:[/red] {e}")
        sys.exit(1)


@cli.command()
def info():
    """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    table = Table(title="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –°–ó–ì–ú–£")
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    # –í–µ—Ä—Å–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = Path("config.yaml")
    table.add_row("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "‚úÖ –ù–∞–π–¥–µ–Ω–∞" if config_path.exists() else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import aiogram
        table.add_row("aiogram", f"‚úÖ v{aiogram.__version__}")
    except ImportError:
        table.add_row("aiogram", "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    try:
        import importlib.util
        yaml_spec = importlib.util.find_spec("yaml")
        if yaml_spec is not None:
            table.add_row("PyYAML", "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            table.add_row("PyYAML", "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ImportError:
        table.add_row("PyYAML", "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    try:
        import openpyxl
        table.add_row("openpyxl", f"‚úÖ v{openpyxl.__version__}")
    except ImportError:
        table.add_row("openpyxl", "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –ü–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    for folder in ["output", "logs", "files", "templates"]:
        folder_path = Path(folder)
        status = "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" if folder_path.exists() else "‚ö†Ô∏è –ù–µ —Å–æ–∑–¥–∞–Ω–∞"
        table.add_row(f"–ü–∞–ø–∫–∞ {folder}", status)
    
    console.print(table)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    rprint("\nüí° [bold blue]–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:[/bold blue]")
    rprint("1. [cyan]szgmu-schedule config-test[/cyan] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    rprint("2. [cyan]szgmu-schedule filters[/cyan] - –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã") 
    rprint("3. [cyan]szgmu-schedule search --course 2[/cyan] - –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è 2 –∫—É—Ä—Å–∞")
    rprint("4. [cyan]szgmu-schedule bot[/cyan] - –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞")


# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è async –∫–æ–º–∞–Ω–¥
def async_command(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è async –∫–æ–º–∞–Ω–¥ –≤ click."""
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))
    return wrapper


# –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ async –∫–æ–º–∞–Ω–¥–∞–º
filters = async_command(filters)
search = async_command(search)
generate = async_command(generate)


if __name__ == "__main__":
    cli()