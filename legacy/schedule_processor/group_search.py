"""
–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.
"""

from typing import Dict, List, Optional
from dataclasses import dataclass, field
import re
from collections import defaultdict

from .api import search_schedules
from .semester_detector import SemesterDetector


@dataclass
class GroupInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ."""
    number: str  # "103–∞"
    speciality: str
    course: int
    stream: str
    semester: str
    year: str
    lecture_schedule: Optional[Dict] = None
    seminar_schedule: Optional[Dict] = None
    unified_lessons: List['UnifiedLesson'] = field(default_factory=list)


@dataclass
class UnifiedLesson:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ (–ª–µ–∫—Ü–∏—è –∏–ª–∏ —Å–µ–º–∏–Ω–∞—Ä)."""
    subject: str
    type: str  # "lecture", "seminar", "practice"
    teacher: str
    room: str
    time_start: str
    time_end: str
    day_name: str
    day_of_week: int
    week_number: int
    group: str
    subgroup: Optional[str] = None
    
    @property
    def time_range(self) -> str:
        return f"{self.time_start}-{self.time_end}"
    
    @property
    def full_info(self) -> str:
        type_emoji = "üìö" if self.type == "lecture" else "üìù"
        subgroup_info = f" | –ü–æ–¥–≥—Ä. {self.subgroup}" if self.subgroup else ""
        return f"{type_emoji} {self.subject} ({self.type})\n     üë®‚Äçüè´ {self.teacher} | üè¢ {self.room}{subgroup_info}"


class GroupSearchService:
    """–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."""
    
    def __init__(self):
        self.semester_detector = SemesterDetector()
        self.groups_cache: Dict[str, List[GroupInfo]] = {}
    
    async def search_group_by_number(self, group_number: str) -> List[GroupInfo]:
        """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–æ–º–µ—Ä—É (103–∞, 204–±, etc)."""
        from loguru import logger
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
            normalized_number = self._normalize_group_number(group_number)
            logger.info(f"Searching for group: {group_number} (normalized: {normalized_number})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if normalized_number in self.groups_cache:
                logger.info(f"Found group {normalized_number} in cache")
                return self.groups_cache[normalized_number]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ç–µ–∫—É—â–∏–π —Å–µ–º–µ—Å—Ç—Ä)
            try:
                priority_filters = self.semester_detector.get_priority_filters()
            except Exception as e:
                logger.warning(f"Failed to get priority filters: {e}, using defaults")
                priority_filters = {"–°–µ–º–µ—Å—Ç—Ä": ["–æ—Å–µ–Ω–Ω–∏–π"], "–£—á–µ–±–Ω—ã–π –≥–æ–¥": ["2024/2025"]}
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ
            search_filters = {
                **priority_filters,
                "–ì—Ä—É–ø–ø–∞": [group_number, normalized_number]
            }
            
            logger.info(f"Search filters: {search_filters}")
            
            # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            try:
                schedules = await search_schedules(search_filters)
                logger.info(f"Found {len(schedules)} schedules")
            except Exception as e:
                logger.error(f"Error in search_schedules: {e}")
                schedules = []
            
            if not schedules:
                logger.warning(f"No schedules found for group {group_number}")
                return []
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É (–ª–µ–∫—Ü–∏–∏/—Å–µ–º–∏–Ω–∞—Ä—ã)
            try:
                groups = self._process_schedules_to_groups(schedules, normalized_number)
                logger.info(f"Processed {len(groups)} groups")
            except Exception as e:
                logger.error(f"Error processing schedules: {e}")
                groups = []
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.groups_cache[normalized_number] = groups
            
            return groups
            
        except Exception as e:
            logger.error(f"Critical error in search_group_by_number: {e}")
            return []
    
    async def search_groups_by_filters(self, filters: Dict) -> List[GroupInfo]:
        """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º."""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–º–µ—Å—Ç—Ä –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
        priority_filters = self.semester_detector.get_priority_filters()
        combined_filters = {**priority_filters, **filters}
        
        # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedules = await search_schedules(combined_filters)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º –≥—Ä—É–ø–ø
        groups_by_number = defaultdict(list)
        
        for schedule in schedules:
            group_numbers = self._extract_group_numbers_from_schedule(schedule)
            for group_num in group_numbers:
                groups_by_number[group_num].append(schedule)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã GroupInfo
        result = []
        for group_num, group_schedules in groups_by_number.items():
            groups = self._process_schedules_to_groups(group_schedules, group_num)
            result.extend(groups)
        
        return result
    
    def _normalize_group_number(self, group_number: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        cleaned = re.sub(r'[^\w\d]', '', group_number.lower())
        return cleaned
    
    def _process_schedules_to_groups(self, schedules: List[Dict], group_number: str) -> List[GroupInfo]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö."""
        if not schedules:
            return []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        lecture_schedules = []
        seminar_schedules = []
        
        for schedule in schedules:
            schedule_type = self._detect_schedule_type(schedule)
            if schedule_type == "lecture":
                lecture_schedules.append(schedule)
            elif schedule_type == "seminar":
                seminar_schedules.append(schedule)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
        first_schedule = schedules[0]
        group_info = self._extract_group_info_from_schedule(first_schedule, group_number)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if lecture_schedules:
            group_info.lecture_schedule = lecture_schedules[0]
        if seminar_schedules:
            group_info.seminar_schedule = seminar_schedules[0]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π
        group_info.unified_lessons = self._merge_schedules_to_lessons(group_info)
        
        return [group_info]
    
    def _detect_schedule_type(self, schedule: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ —Å–µ–º–∏–Ω–∞—Ä—ã)."""
        data = schedule.get('data', {})
        lessons = data.get('scheduleLessonDtoList', [])
        
        if not lessons:
            return "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π
        lesson_types = []
        for lesson in lessons[:10]:
            lesson_type = lesson.get('lessonType', '').lower()
            lesson_types.append(lesson_type)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ç–∏–ø
        if any('–ª–µ–∫—Ü' in lt for lt in lesson_types):
            return "lecture"
        elif any('—Å–µ–º–∏–Ω–∞—Ä' in lt or '–ø—Ä–∞–∫—Ç' in lt for lt in lesson_types):
            return "seminar"
        
        return "unknown"
    
    def _extract_group_info_from_schedule(self, schedule: Dict, group_number: str) -> GroupInfo:
        """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        data = schedule.get('data', {})
        lessons = data.get('scheduleLessonDtoList', [])
        
        if not lessons:
            return GroupInfo(
                number=group_number,
                speciality="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                course=1,
                stream="–∞",
                semester="–æ—Å–µ–Ω–Ω–∏–π",
                year="2024/2025"
            )
        
        first_lesson = lessons[0]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        speciality = first_lesson.get('speciality', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        course = int(first_lesson.get('courseNumber', 1))
        semester = first_lesson.get('semester', '–æ—Å–µ–Ω–Ω–∏–π')
        year = first_lesson.get('academicYear', '2024/2025')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–æ–∫ –∏–∑ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
        stream = group_number[-1] if group_number and group_number[-1].isalpha() else "–∞"
        
        return GroupInfo(
            number=group_number,
            speciality=speciality,
            course=course,
            stream=stream,
            semester=semester,
            year=year
        )
    
    def _extract_group_numbers_from_schedule(self, schedule: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        data = schedule.get('data', {})
        lessons = data.get('scheduleLessonDtoList', [])
        
        groups = set()
        for lesson in lessons:
            group = lesson.get('group')
            if group:
                groups.add(group)
        
        return list(groups)
    
    def _merge_schedules_to_lessons(self, group_info: GroupInfo) -> List[UnifiedLesson]:
        """–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ª–µ–∫—Ü–∏–π –∏ —Å–µ–º–∏–Ω–∞—Ä–æ–≤ –≤ –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫."""
        unified_lessons = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–µ–∫—Ü–∏–∏
        if group_info.lecture_schedule:
            lectures = self._parse_lessons_from_schedule(
                group_info.lecture_schedule, "lecture", group_info.number
            )
            unified_lessons.extend(lectures)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–º–∏–Ω–∞—Ä—ã
        if group_info.seminar_schedule:
            seminars = self._parse_lessons_from_schedule(
                group_info.seminar_schedule, "seminar", group_info.number
            )
            unified_lessons.extend(seminars)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        unified_lessons.sort(key=lambda x: (x.week_number, x.day_of_week, x.time_start))
        
        return unified_lessons
    
    def _parse_lessons_from_schedule(self, schedule: Dict, lesson_type: str, group_number: str) -> List[UnifiedLesson]:
        """–ü–∞—Ä—Å–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        data = schedule.get('data', {})
        lessons_data = data.get('scheduleLessonDtoList', [])
        
        lessons = []
        day_mapping = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1, '–≤—Ç–æ—Ä–Ω–∏–∫': 2, '—Å—Ä–µ–¥–∞': 3, '—á–µ—Ç–≤–µ—Ä–≥': 4, 
            '–ø—è—Ç–Ω–∏—Ü–∞': 5, '—Å—É–±–±–æ—Ç–∞': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 7
        }
        
        for lesson_data in lessons_data:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ
            lesson_group = lesson_data.get('group', '')
            if group_number not in lesson_group:
                continue
            
            lesson = UnifiedLesson(
                subject=lesson_data.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                type=lesson_type,
                teacher=lesson_data.get('teacher', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                room=lesson_data.get('room', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                time_start=lesson_data.get('timeStart', ''),
                time_end=lesson_data.get('timeEnd', ''),
                day_name=lesson_data.get('dayName', ''),
                day_of_week=day_mapping.get(lesson_data.get('dayName', '').lower(), 1),
                week_number=int(lesson_data.get('weekNumber', 1)),
                group=lesson_group,
                subgroup=lesson_data.get('subgroup')
            )
            
            lessons.append(lesson)
        
        return lessons
    
    def get_week_schedule(self, group_info: GroupInfo, week_number: Optional[int] = None) -> Dict[str, List[UnifiedLesson]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
        if week_number is None:
            week_number = self.semester_detector.get_current_semester_info().current_week
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –Ω–µ–¥–µ–ª–∏
        week_lessons = [lesson for lesson in group_info.unified_lessons if lesson.week_number == week_number]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        week_schedule = defaultdict(list)
        for lesson in week_lessons:
            week_schedule[lesson.day_name].append(lesson)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –≤ –∫–∞–∂–¥–æ–º –¥–Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for day_lessons in week_schedule.values():
            day_lessons.sort(key=lambda x: x.time_start)
        
        return dict(week_schedule)
    
    def format_group_schedule(self, group_info: GroupInfo, week_number: Optional[int] = None) -> str:
        """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        semester_info = self.semester_detector.get_current_semester_info()
        week_schedule = self.get_week_schedule(group_info, week_number or semester_info.current_week)
        
        if not week_schedule:
            return f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_info.number}**\n\n‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª–µ {week_number or semester_info.current_week} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        result = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_info.number}**\n"
        result += f"üóì –ù–µ–¥–µ–ª—è {week_number or semester_info.current_week} | {semester_info.name.title()} —Å–µ–º–µ—Å—Ç—Ä {semester_info.year}\n\n"
        
        days_order = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        
        for day in days_order:
            if day in week_schedule:
                result += f"**{day.title()}**\n"
                
                for lesson in week_schedule[day]:
                    result += f"üïê {lesson.time_range} | {lesson.full_info}\n\n"
                
                result += "\n"
        
        return result