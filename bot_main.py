"""
Enhanced Telegram bot with student profile and diary integration.
Implements full UX design with personalized academic assistant functionality.
"""

import asyncio
import hashlib
import os
import sys
from pathlib import Path
from typing import Any, Coroutine, Dict, List, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from loguru import logger

from schedule_processor.api import get_available_filters, search_schedules
from schedule_processor.student_profile import StudentProfile, StudentProfileManager
from schedule_processor.diary import StudentDiary
from schedule_processor.yaml_config import get_config
from schedule_processor.attestation_helper import AttestationHelper
from schedule_processor.grade_calculator import GradeCalculator
from schedule_processor.disclaimer import DisclaimerManager
from schedule_processor.semester_detector import SemesterDetector
from schedule_processor.group_search import GroupSearchService

# --- 1. Configuration ---
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent
API_TOKEN: Optional[str] = os.getenv("BOT_API_KEY")
if not API_TOKEN:
    logger.critical("Need to specify BOT_API_KEY in .env file. Exiting.")
    sys.exit(1)

FILES_DIR = BASE_DIR / "files"
LOGS_DIR = BASE_DIR / "logs"

# --- 2. Logging setup ---
logger.remove()
logger.add(
    sys.stdout,
    format=(
        "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - "
        "<level>{message}</level>"
    ),
    level="INFO",
)
logger.add(
    LOGS_DIR / "bot_errors.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
    level="ERROR",
    rotation="10 MB",
    compression="zip",
)

# --- 3. Aiogram initialization ---
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# --- 4. FSM States ---
class ProfileSetup(StatesGroup):
    waiting_name = State()
    selecting_speciality = State()
    selecting_course = State()
    selecting_stream = State()
    selecting_group = State()
    confirmation = State()

class MainMenu(StatesGroup):
    home = State()
    schedule_view = State()
    diary_view = State()
    applications = State()
    reminders = State()
    settings = State()

class SearchForm(StatesGroup):
    waiting_activation = State()
    selecting_filters = State()
    selecting_options = State()
    processing_search = State()
    selecting_result = State()
    selecting_format = State()
    generating_file = State()

class DiaryStates(StatesGroup):
    main_view = State()
    adding_grade = State()
    adding_homework = State()
    adding_absence = State()
    viewing_stats = State()

class ApplicationStates(StatesGroup):
    selecting_dates = State()
    selecting_reason = State()
    generating_docs = State()

class AttestationStates(StatesGroup):
    main_view = State()
    asking_question = State()
    viewing_info = State()

class GradeStates(StatesGroup):
    main_view = State()
    selecting_subject = State()
    viewing_subject = State()
    adding_grade = State()
    adding_attendance = State()
    entering_grade_data = State()
    entering_attendance_data = State()

class GroupSearchStates(StatesGroup):
    choosing_search_type = State()
    entering_group_number = State()
    selecting_speciality = State()
    selecting_course = State()
    viewing_results = State()
    viewing_schedule = State()


# --- 5. CallbackData Factories ---
class FilterCallback(CallbackData, prefix="filter"):
    name: str


class OptionCallback(CallbackData, prefix="option"):
    filter_name: str
    value: str


class ResultCallback(CallbackData, prefix="result"):
    index: int


class FormatCallback(CallbackData, prefix="format"):
    result_index: int
    format_type: str  # "xlsx" or "ics"

class MenuCallback(CallbackData, prefix="menu"):
    action: str

class ProfileCallback(CallbackData, prefix="profile"):
    action: str
    value: str = ""

class DiaryCallback(CallbackData, prefix="diary"):
    action: str
    item_id: str = ""

class ApplicationCallback(CallbackData, prefix="app"):
    action: str
    data: str = ""

class AttestationCallback(CallbackData, prefix="attest"):
    action: str
    topic: str = ""

class GradeCallback(CallbackData, prefix="grade"):
    action: str
    subject: str = ""
    data: str = ""

class GroupSearchCallback(CallbackData, prefix="group"):
    action: str
    group_number: str = ""
    week: str = "current"


# --- 6. Keyboard utilities ---
def get_filters_keyboard(
    available_filters: Dict[str, List[str]],
    selected_filters: Dict[str, List[str]],
) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for name in available_filters.keys():
        selected_count = len(selected_filters.get(name, []))
        button_text = f"{name} ({selected_count}) {'‚úÖ' if selected_count > 0 else '‚û°Ô∏è'}"
        builder.button(
            text=button_text,
            callback_data=FilterCallback(name=name),
        )
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")
    builder.adjust(1)
    return builder.as_markup()


def get_options_keyboard(
    filter_name: str,
    options: List[str],
    selected_options: List[str],
) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(options):
        is_selected = option in selected_options
        button_text = f"{'‚úÖ ' if is_selected else ''}{option}"
        
        # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        callback_value = str(i) if len(option.encode()) > 40 else option
        builder.button(
            text=button_text,
            callback_data=OptionCallback(filter_name=filter_name, value=callback_value),
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters")
    builder.adjust(2)
    return builder.as_markup()


def get_main_menu_keyboard(user_profile: Optional[StudentProfile] = None) -> types.InlineKeyboardMarkup:
    """Create main menu keyboard based on user profile status."""
    config = get_config()
    emojis = config.get('bot', {}).get('emojis', {})
    
    builder = InlineKeyboardBuilder()
    
    if user_profile:
        # Personalized menu
        builder.button(text=f"{emojis.get('schedule', 'üìÖ')} –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=MenuCallback(action="my_schedule"))
        builder.button(text="üë• –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É", callback_data=MenuCallback(action="search_group"))
        builder.button(text=f"{emojis.get('document', 'üìù')} –ó–∞—è–≤–ª–µ–Ω–∏—è", callback_data=MenuCallback(action="applications"))
        builder.button(text=f"{emojis.get('grades', 'üìä')} –ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫", callback_data=MenuCallback(action="diary"))
        builder.button(text="üìö –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", callback_data=MenuCallback(action="attestation"))
        builder.button(text="üî¢ –ú–æ–∏ –û–°–ë/–ö–ù–õ/–ö–ù–°", callback_data=MenuCallback(action="grades"))
        builder.button(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=MenuCallback(action="reminders"))
        builder.button(text=f"{emojis.get('settings', '‚öôÔ∏è')} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=MenuCallback(action="settings"))
        builder.button(text=f"{emojis.get('search', 'üîç')} –ü–æ–∏—Å–∫ (—Å—Ç–∞—Ä—ã–π)", callback_data=MenuCallback(action="search"))
        builder.adjust(2)
    else:
        # New user menu
        builder.button(text="üéì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=MenuCallback(action="setup_profile"))
        builder.button(text="üîç –†–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data=MenuCallback(action="search"))
        builder.adjust(1)
    
    return builder.as_markup()


def get_profile_setup_keyboard(step: str, options: List[str] = None) -> types.InlineKeyboardMarkup:
    """Create keyboard for profile setup steps."""
    builder = InlineKeyboardBuilder()
    
    if options:
        for option in options:
            builder.button(text=option, callback_data=ProfileCallback(action=step, value=option))
        builder.adjust(2)
    
    return builder.as_markup()


def get_diary_keyboard() -> types.InlineKeyboardMarkup:
    """Create diary main menu keyboard."""
    config = get_config()
    emojis = config.get('bot', {}).get('emojis', {})
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"{emojis.get('homework', 'üìù')} –î–ó –∏ –∑–∞–¥–∞–Ω–∏—è", callback_data=DiaryCallback(action="homework"))
    builder.button(text=f"{emojis.get('grades', 'üéØ')} –û—Ü–µ–Ω–∫–∏", callback_data=DiaryCallback(action="grades"))
    builder.button(text=f"{emojis.get('absences', '‚ùå')} –ü—Ä–æ–ø—É—Å–∫–∏", callback_data=DiaryCallback(action="absences"))
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=DiaryCallback(action="stats"))
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=DiaryCallback(action="add"))
    builder.button(text=f"{emojis.get('home', 'üè†')} –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(2)
    return builder.as_markup()


def get_applications_keyboard() -> types.InlineKeyboardMarkup:
    """Create applications menu keyboard."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è", callback_data=ApplicationCallback(action="today"))
    builder.button(text="üóì –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data=ApplicationCallback(action="manual_dates"))
    builder.button(text="üìã –ü–µ—Ä–∏–æ–¥ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)", callback_data=ApplicationCallback(action="period"))
    builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(2)
    return builder.as_markup()


def get_attestation_keyboard() -> types.InlineKeyboardMarkup:
    """Create attestation help keyboard."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üî¢ –ö–ù–õ/–ö–ù–°", callback_data=AttestationCallback(action="info", topic="knl_kns"))
    builder.button(text="üìã –ü—Ä–æ–ø—É—Å–∫–∏", callback_data=AttestationCallback(action="info", topic="absences"))
    builder.button(text="üìö –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data=AttestationCallback(action="info", topic="consultations"))
    builder.button(text="üìÖ –°—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data=AttestationCallback(action="info", topic="deadlines"))
    builder.button(text="üéì –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", callback_data=AttestationCallback(action="info", topic="attestation"))
    builder.button(text="üí° –°–æ–≤–µ—Ç—ã", callback_data=AttestationCallback(action="info", topic="tips"))
    builder.button(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=AttestationCallback(action="ask"))
    builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(2)
    return builder.as_markup()


def get_grades_keyboard(subjects: List[str] = None) -> types.InlineKeyboardMarkup:
    """Create grades management keyboard."""
    builder = InlineKeyboardBuilder()
    
    if subjects:
        for subject in subjects:
            builder.button(text=f"üìö {subject}", callback_data=GradeCallback(action="view_subject", subject=subject))
    
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=GradeCallback(action="add_subject"))
    builder.button(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=GradeCallback(action="overall_stats"))
    builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(2)
    return builder.as_markup()


def get_subject_keyboard(subject: str) -> types.InlineKeyboardMarkup:
    """Create subject management keyboard."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=GradeCallback(action="add_grade", subject=subject))
    builder.button(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ", callback_data=GradeCallback(action="add_attendance", subject=subject, data="present"))
    builder.button(text="‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫", callback_data=GradeCallback(action="add_attendance", subject=subject, data="absent"))
    builder.button(text="‚¨ÖÔ∏è –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data=MenuCallback(action="grades"))
    builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(2)
    return builder.as_markup()


def get_group_search_keyboard() -> types.InlineKeyboardMarkup:
    """Create group search keyboard."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", callback_data=GroupSearchCallback(action="quick_search"))
    builder.button(text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫", callback_data=GroupSearchCallback(action="detailed_search"))
    builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(2)
    return builder.as_markup()


def get_group_result_keyboard(group_number: str) -> types.InlineKeyboardMarkup:
    """Create keyboard for group search result."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=GroupSearchCallback(action="show_schedule", group_number=group_number, week="current"))
    builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=GroupSearchCallback(action="show_schedule", group_number=group_number, week="prev"))
    builder.button(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=GroupSearchCallback(action="show_schedule", group_number=group_number, week="next"))
    builder.button(text="üìä Excel", callback_data=GroupSearchCallback(action="export", group_number=group_number))
    builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=MenuCallback(action="search_group"))
    builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(3, 2)
    return builder.as_markup()


async def show_loading_spinner(message, text_prefix: str = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞"):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏."""
    spinner_frames = ["‚è≥", "‚åõ", "‚è≥", "‚åõ"]
    
    for i in range(8):  # 2 —Å–µ–∫—É–Ω–¥—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        frame = spinner_frames[i % len(spinner_frames)]
        try:
            await message.edit_text(f"{frame} {text_prefix}...")
            await asyncio.sleep(0.25)
        except Exception:
            break  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤—ã—Ö–æ–¥–∏–º


# --- 7. File generation function ---
async def generate_schedule_file(search_result: Dict, format_type: str, subgroup_name: str) -> Path:
    """
    Generate schedule file using the real schedule processor.
    
    Args:
        search_result: Selected search result with schedule data
        format_type: "xlsx" or "ics"
        subgroup_name: Name of the subgroup to filter lessons
        
    Returns:
        Path to generated file
    """
    logger.info(f"Generating {format_type} file for subgroup: {subgroup_name}")
    
    # Create temporary output directory
    temp_dir = FILES_DIR / "temp"
    temp_dir.mkdir(parents=True, exist_ok=True)
    
    # Extract schedule info for processing
    schedule_data = search_result['data']
    
    # Process using v3 logic (working version)
    try:
        import sys
        from pathlib import Path
        
        # Add legacy/v3 to path temporarily
        v3_path = Path(__file__).parent / "legacy" / "v3"
        sys.path.insert(0, str(v3_path))
        
        from get_raw import process_lessons
        from processing import process_lessons_for_export
        from xlsx import gen_excel_file
        from ical import gen_ical
        from config import WEEK_DAYS
        import datetime
        
        # Process lessons from the schedule data
        all_lessons = process_lessons(schedule_data)
        
        if not all_lessons:
            raise Exception("No lessons found in schedule data")
        
        # Determine first schedule date (same logic as v3/main.py)
        earliest_lesson = min(all_lessons, key=lambda x: (int(x.weekNumber), WEEK_DAYS.get(x.dayName, 999)))
        first_day_index = WEEK_DAYS.get(earliest_lesson.dayName, 0)
        
        semestr_num: int = 0 if earliest_lesson.semester == "–æ—Å–µ–Ω–Ω–∏–π" else 1
        year: int = int(earliest_lesson.academicYear.split("/")[semestr_num])
        month: int = [9, 2][semestr_num]
        first_monday_of_semestr: datetime.date = datetime.date(year, month, 1)
        while first_monday_of_semestr.weekday() != first_day_index:
            first_monday_of_semestr += datetime.timedelta(days=1)

        
        # Process lessons for export using v3 logic
        processed_lessons = process_lessons_for_export(all_lessons, subgroup_name, first_monday_of_semestr)
        
        if not processed_lessons:
            raise Exception(f"No lessons found for subgroup {subgroup_name}")
        
        # Ensure output directory exists  
        output_dir = Path("output")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Generate requested file format using v3 generators
        if format_type == "xlsx":
            gen_excel_file(processed_lessons, subgroup_name)
            file_path = output_dir / f"{subgroup_name}.xlsx"
        else:  # ics
            gen_ical(processed_lessons, subgroup_name)
            file_path = output_dir / f"{subgroup_name}.ics"
        
        # Remove v3 from path
        sys.path.remove(str(v3_path))
        
        if file_path.exists():
            logger.info(f"Successfully generated {format_type} file: {file_path}")
            return file_path
        else:
            raise Exception(f"Generated file {file_path} does not exist")
            
    except Exception as e:
        logger.error(f"Error generating schedule file: {e}")
        
        # Fallback: create a simple text file with error info
        file_hash = hashlib.md5(f"{search_result['display_name']}_{subgroup_name}".encode()).hexdigest()
        fallback_file = temp_dir / f"error_{file_hash}.txt"
        
        with open(fallback_file, "w", encoding="utf-8") as f:
            f.write(f"Error generating {format_type} file\n")
            f.write(f"Schedule: {search_result['display_name']}\n")
            f.write(f"Subgroup: {subgroup_name}\n")
            f.write(f"Error: {str(e)}\n")
            f.write("Generated by Schedule Processor Bot\n")
        
        return fallback_file


def format_schedule_info(schedule_data: Dict) -> str:
    """
    Format schedule data into readable description for bot buttons.
    
    Args:
        schedule_data: Raw schedule data from API
        
    Returns:
        Formatted string with schedule characteristics
    """
    data = schedule_data.get('data', {})
    
    # Extract key information
    file_name = data.get('fileName', 'Unknown')
    
    # Try to extract info from lessons
    lessons = data.get('scheduleLessonDtoList', [])
    if lessons:
        first_lesson = lessons[0]
        speciality = first_lesson.get('speciality', 'Unknown')
        course_number = first_lesson.get('courseNumber', 'Unknown') 
        semester = first_lesson.get('semester', 'Unknown')
        academic_year = first_lesson.get('academicYear', 'Unknown')
        group_stream = first_lesson.get('groupStream', 'Unknown')
        lesson_type = first_lesson.get('lessonType', 'Unknown')
        
        # Get unique subgroups
        subgroups = set()
        for lesson in lessons[:10]:  # Check first 10 lessons
            if lesson.get('subgroup'):
                subgroups.add(lesson.get('subgroup'))
        
        subgroups_str = ", ".join(sorted(subgroups)) if subgroups else "Unknown"
        
        return (f"{speciality}\n"
                f"–ö—É—Ä—Å: {course_number}, –ü–æ—Ç–æ–∫: {group_stream}\n" 
                f"–°–µ–º–µ—Å—Ç—Ä: {semester} {academic_year}\n"
                f"–ü–æ–¥–≥—Ä—É–ø–ø—ã: {subgroups_str}\n"
                f"–¢–∏–ø: {lesson_type}")
    
    return f"–§–∞–π–ª: {file_name}"


# --- 8. Handlers ---

@dp.message(Command("start", "help"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    logger.info(f"User {message.from_user.id} started the bot.")
    await state.clear()
    
    # Check user agreement
    disclaimer_manager = DisclaimerManager(BASE_DIR / "user_data" / "agreements")
    user_id = str(message.from_user.id)
    
    if not disclaimer_manager.has_user_agreed(user_id):
        # Show disclaimer first
        agreement_text = disclaimer_manager.get_welcome_agreement()
        disclaimer_manager.record_user_agreement(user_id)  # Auto-agree for now
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=MenuCallback(action="continue_after_agreement"))
        
        await message.answer(agreement_text, reply_markup=builder.as_markup())
        return
    
    # Load user profile
    profile_manager = StudentProfileManager(BASE_DIR / "user_data" / "profiles")
    user_profile = profile_manager.load_profile(message.from_user.id)
    
    config = get_config()
    welcome_msg = config.get('bot', {}).get('messages', {}).get('welcome', 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.')
    
    if user_profile:
        # Returning user with profile
        await state.set_state(MainMenu.home)
        await message.answer(
            f"üìö –°—Ç—É–¥–µ–Ω—Ç: {user_profile.full_name} | –ì—Ä—É–ø–ø–∞: {user_profile.group}\n\n"
            f"–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_main_menu_keyboard(user_profile)
        )
    else:
        # New user
        await state.set_state(MainMenu.home)
        setup_msg = config.get('bot', {}).get('messages', {}).get('profile_setup_needed', 
                                                                    '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É:')
        await message.answer(
            f"{welcome_msg}\n\n{setup_msg}",
            reply_markup=get_main_menu_keyboard()
        )


@dp.message(Command("cancel"), StateFilter("*"))
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    logger.info(f"User {message.from_user.id} cancelled action.")
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start")


# --- 8.1 Main Menu Handlers ---

@dp.callback_query(MenuCallback.filter())
async def handle_main_menu(callback: types.CallbackQuery, callback_data: MenuCallback, state: FSMContext) -> None:
    await callback.answer()
    action = callback_data.action
    logger.info(f"User {callback.from_user.id} selected menu action: {action}")
    
    profile_manager = StudentProfileManager(BASE_DIR / "user_data" / "profiles")
    user_profile = profile_manager.load_profile(callback.from_user.id)
    
    if action == "home":
        await state.set_state(MainMenu.home)
        if user_profile:
            await callback.message.edit_text(
                f"üìö –°—Ç—É–¥–µ–Ω—Ç: {user_profile.full_name} | –ì—Ä—É–ø–ø–∞: {user_profile.group}\n\n"
                f"–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=get_main_menu_keyboard(user_profile)
            )
        else:
            await callback.message.edit_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É:",
                reply_markup=get_main_menu_keyboard()
            )
    
    elif action == "setup_profile":
        await state.set_state(ProfileSetup.waiting_name)
        await callback.message.edit_text(
            "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n\n"
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é)"
        )
    
    elif action == "my_schedule":
        await state.set_state(MainMenu.schedule_view)
        # TODO: Implement schedule view
        await callback.message.edit_text(
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
            "üóì –°–µ–≥–æ–¥–Ω—è: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –±—É–¥–µ—Ç –∑–¥–µ—Å—å",
            reply_markup=InlineKeyboardBuilder().button(
                text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home")
            ).as_markup()
        )
    
    elif action == "diary":
        await state.set_state(DiaryStates.main_view)
        if user_profile:
            diary = StudentDiary(user_profile.user_id)
            stats = diary.get_statistics()
            
            stats_text = "üìä –î–Ω–µ–≤–Ω–∏–∫ | "
            if user_profile.full_name:
                stats_text += f"{user_profile.full_name.split()[1]} {user_profile.full_name.split()[0]} | "
            stats_text += f"{user_profile.group}\n\n"
            
            stats_text += "üìà –¢–µ–∫—É—â–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:\n"
            if stats.get('subjects'):
                for subject, avg in stats['subjects'].items():
                    stats_text += f"üìö {subject}: {avg:.1f}\n"
            else:
                stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"
            
            stats_text += f"\nüìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –î–ó: {stats.get('active_homework', 0)}\n"
            stats_text += f"‚ùå –ü—Ä–æ–ø—É—Å–∫–æ–≤: {stats.get('absences', 0)} –¥–Ω–µ–π"
            
            await callback.message.edit_text(stats_text, reply_markup=get_diary_keyboard())
        else:
            await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=get_main_menu_keyboard())
    
    elif action == "applications":
        await state.set_state(ApplicationStates.selecting_dates) 
        if user_profile:
            await callback.message.edit_text(
                f"üìù –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π –°–ó–ì–ú–£\n\n"
                f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {user_profile.full_name}\n"
                f"üéì –ì—Ä—É–ø–ø–∞: {user_profile.group}, {user_profile.course} –∫—É—Ä—Å\n\n"
                f"‚ÑπÔ∏è –ù—É–∂–Ω–æ 2 –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n"
                f"‚Ä¢ –ó–∞—è–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ\n"
                f"‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤ –¥–∏—Ä–µ–∫—Ü–∏—é –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞\n\n"
                f"–ß—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å?",
                reply_markup=get_applications_keyboard()
            )
        else:
            await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=get_main_menu_keyboard())
    
    elif action == "attestation":
        await state.set_state(AttestationStates.main_view)
        if user_profile:
            await callback.message.edit_text(
                f"üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –°–ó–ì–ú–£\n\n"
                f"üë§ {user_profile.full_name}\n"
                f"üéì {user_profile.group}, {user_profile.course} –∫—É—Ä—Å\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
                reply_markup=get_attestation_keyboard()
            )
        else:
            await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=get_main_menu_keyboard())
    
    elif action == "grades":
        await state.set_state(GradeStates.main_view)
        if user_profile:
            calculator = GradeCalculator(str(callback.from_user.id))
            subjects = calculator.get_all_subjects()
            stats = calculator.get_overall_stats()
            
            text = "üî¢ **–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**\n\n"
            text += f"üë§ {user_profile.full_name}\n"
            text += f"üéì {user_profile.group}, {user_profile.course} –∫—É—Ä—Å\n\n"
            
            if stats['total_subjects'] > 0:
                text += "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¢–°–ë: {stats['average_tsb']}\n"
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ö–ù–õ: {stats['average_knl']}\n"
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ö–ù–°: {stats['average_kns']}\n"
                text += f"‚Ä¢ **–°—Ä–µ–¥–Ω–∏–π –û–°–ë: {stats['average_osb']}**\n\n"
                text += f"üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {stats['total_subjects']}\n"
                text += f"üéØ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {stats['total_grades']}"
            else:
                text += "üìö –ü—Ä–µ–¥–º–µ—Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
                text += "–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –≤–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –æ—Ü–µ–Ω–æ–∫ –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏."
            
            await callback.message.edit_text(text, reply_markup=get_grades_keyboard(subjects))
        else:
            await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=get_main_menu_keyboard())
    
    elif action == "search_group":
        await state.set_state(GroupSearchStates.choosing_search_type)
        if user_profile:
            semester_detector = SemesterDetector()
            current_semester = semester_detector.get_semester_display_text()
            
            await callback.message.edit_text(
                f"üë• **–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã**\n\n"
                f"üìÖ {current_semester}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=get_group_search_keyboard()
            )
        else:
            await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=get_main_menu_keyboard())
    
    elif action == "continue_after_agreement":
        # –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(MainMenu.home)
        
        # Load user profile
        profile_manager = StudentProfileManager(BASE_DIR / "user_data" / "profiles")
        user_profile = profile_manager.load_profile(callback.from_user.id)
        
        config = get_config()
        welcome_msg = config.get('bot', {}).get('messages', {}).get('welcome', 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.')
        
        if user_profile:
            await callback.message.edit_text(
                f"üìö –°—Ç—É–¥–µ–Ω—Ç: {user_profile.full_name} | –ì—Ä—É–ø–ø–∞: {user_profile.group}\n\n"
                f"–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=get_main_menu_keyboard(user_profile)
            )
        else:
            setup_msg = config.get('bot', {}).get('messages', {}).get('profile_setup_needed', 
                                                                        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É:')
            await callback.message.edit_text(
                f"{welcome_msg}\n\n{setup_msg}",
                reply_markup=get_main_menu_keyboard()
            )
    
    elif action == "search":
        await state.set_state(SearchForm.waiting_activation)
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n"
            "–ù–∞–π–¥–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª—é–±–æ–π –≥—Ä—É–ø–ø—ã",
            reply_markup=InlineKeyboardBuilder().button(
                text="–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä", callback_data="start_selection"
            ).as_markup()
        )


# --- 8.2 Profile Setup Handlers ---

@dp.message(StateFilter(ProfileSetup.waiting_name))
async def process_profile_name(message: Message, state: FSMContext) -> None:
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –º–∏–Ω–∏–º—É–º)")
        return
    
    await state.update_data(full_name=full_name)
    await state.set_state(ProfileSetup.selecting_speciality)
    
    # Load available filters to get specialities
    try:
        logger.info("Loading available filters for profile setup")
        available_filters = await get_available_filters()
        specialities = available_filters.get('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', [])
        
        if not specialities:
            specialities = ["–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ", "–ü–µ–¥–∏–∞—Ç—Ä–∏—è", "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è"]  # Fallback
        
        keyboard = get_profile_setup_keyboard("speciality", specialities[:10])  # Limit to first 10
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º —Ç–≤–æ—é –≥—Ä—É–ø–ø—É.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=keyboard
        )
        logger.info(f"Loaded {len(specialities)} specialities for profile setup")
        
    except Exception as e:
        logger.error(f"Error loading specialities: {e}")
        # Fallback with basic specialities
        basic_specialities = ["–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ", "–ü–µ–¥–∏–∞—Ç—Ä–∏—è", "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "–§–∞—Ä–º–∞—Ü–∏—è"]
        keyboard = get_profile_setup_keyboard("speciality", basic_specialities)
        
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º —Ç–≤–æ—é –≥—Ä—É–ø–ø—É.\n\n"
            "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è–ª–∞ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∫–∞–∑–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=keyboard
        )


@dp.callback_query(ProfileCallback.filter(), StateFilter(ProfileSetup.selecting_speciality))
async def process_profile_speciality(callback: types.CallbackQuery, callback_data: ProfileCallback, state: FSMContext) -> None:
    await callback.answer()
    speciality = callback_data.value
    await state.update_data(speciality=speciality)
    await state.set_state(ProfileSetup.selecting_course)
    
    # Simple course selection
    courses = ["1", "2", "3", "4", "5", "6"]
    keyboard = get_profile_setup_keyboard("course", courses)
    await callback.message.edit_text("–ö—É—Ä—Å:", reply_markup=keyboard)


@dp.callback_query(ProfileCallback.filter(), StateFilter(ProfileSetup.selecting_course))
async def process_profile_course(callback: types.CallbackQuery, callback_data: ProfileCallback, state: FSMContext) -> None:
    await callback.answer()
    course = callback_data.value
    await state.update_data(course=course)
    await state.set_state(ProfileSetup.selecting_stream)
    
    # Simple stream selection
    streams = ["–∞", "–±", "–≤"]
    keyboard = get_profile_setup_keyboard("stream", streams)
    await callback.message.edit_text("–ü–æ—Ç–æ–∫:", reply_markup=keyboard)


@dp.callback_query(ProfileCallback.filter(), StateFilter(ProfileSetup.selecting_stream))
async def process_profile_stream(callback: types.CallbackQuery, callback_data: ProfileCallback, state: FSMContext) -> None:
    await callback.answer()
    stream = callback_data.value
    await state.update_data(stream=stream)
    
    data = await state.get_data()
    course = data.get('course')
    
    # Generate group options based on course and stream
    groups = [f"{course}0{i}{stream}" for i in range(1, 6)]
    
    await state.set_state(ProfileSetup.selecting_group)
    keyboard = get_profile_setup_keyboard("group", groups)
    await callback.message.edit_text("–ü–æ–¥–≥—Ä—É–ø–ø–∞:", reply_markup=keyboard)


@dp.callback_query(ProfileCallback.filter(), StateFilter(ProfileSetup.selecting_group))
async def process_profile_group(callback: types.CallbackQuery, callback_data: ProfileCallback, state: FSMContext) -> None:
    await callback.answer()
    group = callback_data.value
    
    data = await state.get_data()
    full_name = data.get('full_name')
    speciality = data.get('speciality')
    course = data.get('course')
    
    await state.set_state(ProfileSetup.confirmation)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=ProfileCallback(action="confirm"))
    builder.button(text="‚ùå –í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=MenuCallback(action="setup_profile"))
    
    await callback.message.edit_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group}\n\n"
        f"{speciality}, {course} –∫—É—Ä—Å\n"
        f"–°—Ç—É–¥–µ–Ω—Ç: {full_name}\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(ProfileCallback.filter(F.action == "confirm"), StateFilter(ProfileSetup.confirmation))
async def confirm_profile_setup(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    
    data = await state.get_data()
    
    # Create and save profile
    profile = StudentProfile(
        user_id=str(callback.from_user.id),
        telegram_username=callback.from_user.username or "",
        full_name=data.get('full_name'),
        speciality=data.get('speciality'),
        course=int(data.get('course')),
        stream=data.get('stream'),
        group=data.get('group')
    )
    
    profile_manager = StudentProfileManager(BASE_DIR / "user_data" / "profiles")
    profile_manager.save_profile(profile)
    
    # Initialize diary for the user
    StudentDiary(str(callback.from_user.id))
    
    await state.clear()
    await state.set_state(MainMenu.home)
    
    welcome_back = "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É."
    
    await callback.message.edit_text(
        f"üìö –°—Ç—É–¥–µ–Ω—Ç: {profile.full_name} | –ì—Ä—É–ø–ø–∞: {profile.group}\n\n"
        f"{welcome_back}\n\n"
        f"–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=get_main_menu_keyboard(profile)
    )


@dp.callback_query(
    F.data == "start_selection", StateFilter(SearchForm.waiting_activation)
)
async def start_selection(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started selection.")

    await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
    available_filters = await get_available_filters()

    await state.update_data(available_filters=available_filters, selected_filters={})
    await state.set_state(SearchForm.selecting_filters)

    keyboard = get_filters_keyboard(available_filters, {})
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard
    )


@dp.callback_query(FilterCallback.filter(), StateFilter(SearchForm.selecting_filters))
async def select_filter_category(
    callback: types.CallbackQuery, callback_data: FilterCallback, state: FSMContext
) -> None:
    await callback.answer()
    filter_name = callback_data.name
    logger.info(f"User {callback.from_user.id} selected filter: {filter_name}")

    data = await state.get_data()
    available_options = data["available_filters"][filter_name]
    selected_options = data["selected_filters"].get(filter_name, [])

    keyboard = get_options_keyboard(filter_name, available_options, selected_options)
    await state.set_state(SearchForm.selecting_options)
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è <b>{filter_name}</b>:", reply_markup=keyboard
    )


@dp.callback_query(OptionCallback.filter(), StateFilter(SearchForm.selecting_options))
async def select_filter_value(
    callback: types.CallbackQuery, callback_data: OptionCallback, state: FSMContext
) -> None:
    await callback.answer()
    filter_name = callback_data.filter_name
    value = callback_data.value
    user_id = callback.from_user.id
    logger.info(f"User {user_id} selected value: {filter_name}={value}")

    data = await state.get_data()
    selected_filters = data["selected_filters"]
    available_options = data["available_filters"][filter_name]

    # –ï—Å–ª–∏ value - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if value.isdigit():
        option_index = int(value)
        if 0 <= option_index < len(available_options):
            actual_value = available_options[option_index]
        else:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
            return
    else:
        actual_value = value

    if filter_name not in selected_filters:
        selected_filters[filter_name] = []

    if actual_value in selected_filters[filter_name]:
        selected_filters[filter_name].remove(actual_value)
    else:
        selected_filters[filter_name].append(actual_value)

    await state.update_data(selected_filters=selected_filters)

    data = await state.get_data()
    selected_options = data["selected_filters"].get(filter_name, [])
    keyboard = get_options_keyboard(filter_name, available_options, selected_options)

    await callback.message.edit_reply_markup(reply_markup=keyboard)


@dp.callback_query(
    F.data == "back_to_filters", StateFilter(SearchForm.selecting_options)
)
async def back_to_filters(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    logger.info(f"User {callback.from_user.id} returned to filters.")
    await state.set_state(SearchForm.selecting_filters)

    data = await state.get_data()
    keyboard = get_filters_keyboard(data["available_filters"], data["selected_filters"])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard
    )


@dp.callback_query(F.data == "start_search", StateFilter(SearchForm.selecting_filters))
async def start_search(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started search.")
    await state.set_state(SearchForm.processing_search)

    data = await state.get_data()
    selected_filters = data.get("selected_filters", {})

    if not any(selected_filters.values()):
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω."
        )
        keyboard = get_filters_keyboard(data["available_filters"], selected_filters)
        await state.set_state(SearchForm.selecting_filters)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard
        )
        return

    await callback.message.edit_text("‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
    search_results = await search_schedules(selected_filters)
    await state.update_data(search_results=search_results)

    if not search_results:
        await callback.message.edit_text(
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )
        keyboard = get_filters_keyboard(data["available_filters"], selected_filters)
        await state.set_state(SearchForm.selecting_filters)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard
        )
        return

    builder = InlineKeyboardBuilder()
    for i, result in enumerate(search_results):
        # Use formatted info instead of filename
        formatted_info = format_schedule_info(result)
        # Truncate if too long for button
        button_text = formatted_info.replace('\n', ' | ')
        if len(button_text) > 60:
            button_text = button_text[:57] + "..."
        builder.button(text=button_text, callback_data=ResultCallback(index=i))

    builder.adjust(1)
    await state.set_state(SearchForm.selecting_result)
    await callback.message.edit_text(
        "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:", reply_markup=builder.as_markup()
    )


@dp.callback_query(ResultCallback.filter(), StateFilter(SearchForm.selecting_result))
async def select_result(
    callback: types.CallbackQuery, callback_data: ResultCallback, state: FSMContext
) -> None:
    await callback.answer()
    result_index = callback_data.index
    logger.info(f"User {callback.from_user.id} selected result: {result_index}")
    
    data = await state.get_data()
    selected_result = data["search_results"][result_index]
    
    # Store selected result for later use
    await state.update_data(selected_result_index=result_index)
    
    # Show detailed info and ask for subgroup + format
    schedule_info = format_schedule_info(selected_result)
    
    # Extract available subgroups from the schedule
    schedule_data = selected_result.get('data', {})
    lessons = schedule_data.get('scheduleLessonDtoList', [])
    subgroups = set()
    for lesson in lessons:
        if lesson.get('subgroup'):
            subgroups.add(lesson.get('subgroup'))
    
    subgroups_list = sorted(subgroups)
    
    if not subgroups_list:
        await callback.message.edit_text(
            f"‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–≥—Ä—É–ø–ø.\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n{schedule_info}"
        )
        return
    
    # Create subgroup selection keyboard
    builder = InlineKeyboardBuilder()
    for subgroup in subgroups_list:
        builder.button(
            text=f"üìö {subgroup}", 
            callback_data=f"subgroup_{result_index}_{subgroup}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")
    builder.adjust(2)
    
    await state.set_state(SearchForm.selecting_format)
    await callback.message.edit_text(
        f"üìã <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n{schedule_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("subgroup_"), StateFilter(SearchForm.selecting_format))
async def select_subgroup(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    
    # Parse callback data: "subgroup_{result_index}_{subgroup_name}"
    _, result_index_str, subgroup_name = callback.data.split("_", 2)
    result_index = int(result_index_str)
    
    logger.info(f"User {callback.from_user.id} selected subgroup: {subgroup_name}")
    
    # Store subgroup selection
    await state.update_data(selected_subgroup=subgroup_name)
    
    # Show format selection
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìä Excel (.xlsx)", 
        callback_data=FormatCallback(result_index=result_index, format_type="xlsx")
    )
    builder.button(
        text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å (.ics)", 
        callback_data=FormatCallback(result_index=result_index, format_type="ics")
    )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–≥—Ä—É–ø–ø–∞–º", callback_data=f"back_to_subgroups_{result_index}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üìö <b>–ü–æ–¥–≥—Ä—É–ø–ø–∞:</b> {subgroup_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("back_to_subgroups_"), StateFilter(SearchForm.selecting_format))
async def back_to_subgroups(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    
    result_index = int(callback.data.split("_")[-1])
    
    # Re-trigger result selection to show subgroup menu
    fake_callback_data = ResultCallback(index=result_index)
    await select_result(callback, fake_callback_data, state)


@dp.callback_query(F.data == "back_to_results", StateFilter(SearchForm.selecting_format))
async def back_to_results_from_subgroups(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    
    # Go back to results selection
    data = await state.get_data()
    search_results = data.get("search_results", [])
    
    builder = InlineKeyboardBuilder()
    for i, result in enumerate(search_results):
        formatted_info = format_schedule_info(result)
        button_text = formatted_info.replace('\n', ' | ')
        if len(button_text) > 60:
            button_text = button_text[:57] + "..."
        builder.button(text=button_text, callback_data=ResultCallback(index=i))

    builder.adjust(1)
    await state.set_state(SearchForm.selecting_result)
    await callback.message.edit_text(
        "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:", reply_markup=builder.as_markup()
    )


@dp.callback_query(FormatCallback.filter(), StateFilter(SearchForm.selecting_format))
async def select_format(
    callback: types.CallbackQuery, callback_data: FormatCallback, state: FSMContext
) -> None:
    await callback.answer()
    result_index = callback_data.result_index
    format_type = callback_data.format_type
    
    logger.info(f"User {callback.from_user.id} selected format: {format_type}")
    
    await state.set_state(SearchForm.generating_file)

    data = await state.get_data()
    selected_result = data["search_results"][result_index]
    subgroup_name = data["selected_subgroup"]

    format_name = "Excel" if format_type == "xlsx" else "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
    await callback.message.edit_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {format_name} —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã {subgroup_name}...")
    
    try:
        file_path = await generate_schedule_file(selected_result, format_type, subgroup_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not file_path.exists():
            raise FileNotFoundError(f"Generated file does not exist: {file_path}")

        # Send file to user with disclaimer
        disclaimer_manager = DisclaimerManager(BASE_DIR / "user_data" / "agreements")
        disclaimer = disclaimer_manager.get_short_disclaimer()
        
        document = FSInputFile(file_path)
        file_description = f"üìé {format_name} —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã {subgroup_name}"
        caption = f"{file_description}\n\n{disclaimer}"
        
        await callback.message.answer_document(document, caption=caption)

        # Return to initial state
        await state.set_state(SearchForm.waiting_activation)
        keyboard = InlineKeyboardBuilder().button(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="start_selection"
        )
        await callback.message.answer(
            "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?",
            reply_markup=keyboard.as_markup(),
        )
    except Exception as e:
        logger.error(f"Error in file generation: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç."
        )
        # Return to format selection
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üìä Excel (.xlsx)", 
            callback_data=FormatCallback(result_index=result_index, format_type="xlsx")
        )
        builder.button(
            text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å (.ics)", 
            callback_data=FormatCallback(result_index=result_index, format_type="ics")
        )
        builder.adjust(2)
        
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã {subgroup_name}:",
            reply_markup=builder.as_markup()
        )


# --- 8.3 Attestation Handlers ---

@dp.callback_query(AttestationCallback.filter())
async def handle_attestation(callback: types.CallbackQuery, callback_data: AttestationCallback, state: FSMContext) -> None:
    await callback.answer()
    action = callback_data.action
    topic = callback_data.topic
    
    attestation_helper = AttestationHelper()
    
    if action == "info":
        await state.set_state(AttestationStates.viewing_info)
        
        if topic == "knl_kns":
            text = attestation_helper.get_knl_kns_explanation()
        elif topic == "absences":
            text = attestation_helper._get_absence_detailed_info()
        elif topic == "consultations":
            text = attestation_helper.get_individual_consultations_info()
        elif topic == "deadlines":
            text = attestation_helper.get_document_deadlines()
        elif topic == "attestation":
            text = attestation_helper._get_attestation_info()
        elif topic == "tips":
            tips = attestation_helper.get_practical_tips()
            text = "üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã**\n\n" + "\n".join(tips)
        else:
            text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=MenuCallback(action="attestation"))
        builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    elif action == "ask":
        await state.set_state(AttestationStates.asking_question)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=MenuCallback(action="attestation"))
        
        await callback.message.edit_text(
            "‚ùì **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞—Ö, –ö–ù–õ/–ö–ù–° –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n"
            "–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –¥–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –°–ó–ì–ú–£.",
            reply_markup=builder.as_markup()
        )


@dp.message(StateFilter(AttestationStates.asking_question))
async def process_attestation_question(message: Message, state: FSMContext) -> None:
    question = message.text.strip()
    
    attestation_helper = AttestationHelper()
    answer = attestation_helper.analyze_question(question)
    
    if answer:
        response_text = f"‚ùì **–í–∞—à –≤–æ–ø—Ä–æ—Å:** {question}\n\n{answer}"
    else:
        response_text = (
            f"‚ùì **–í–∞—à –≤–æ–ø—Ä–æ—Å:** {question}\n\n"
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –ö–ù–õ, –ö–ù–°, –ø—Ä–æ–ø—É—Å–∫–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —Å—Ä–æ–∫–∏\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"
        )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data=MenuCallback(action="attestation"))
    builder.button(text="‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data=AttestationCallback(action="ask"))
    builder.button(text="üè† –í –º–µ–Ω—é", callback_data=MenuCallback(action="home"))
    builder.adjust(2)
    
    await state.set_state(AttestationStates.viewing_info)
    await message.answer(response_text, reply_markup=builder.as_markup())


# --- 8.4 Group Search Handlers ---

@dp.callback_query(GroupSearchCallback.filter())
async def handle_group_search(callback: types.CallbackQuery, callback_data: GroupSearchCallback, state: FSMContext) -> None:
    await callback.answer()
    action = callback_data.action
    
    if action == "quick_search":
        await state.set_state(GroupSearchStates.entering_group_number)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=MenuCallback(action="search_group"))
        
        await callback.message.edit_text(
            "üîç **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã**\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `103–∞`, `204–±`, `301–≤`",
            reply_markup=builder.as_markup()
        )
    
    elif action == "detailed_search":
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫
        await callback.message.edit_text(
            "üìä **–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫**\n\n"
            "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
            "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã.",
            reply_markup=get_group_search_keyboard()
        )
    
    elif action == "show_schedule":
        week = callback_data.week
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        group_info = data.get('current_group_info')
        
        if not group_info:
            await callback.message.edit_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_group_search_keyboard()
            )
            return
        
        await show_group_schedule(callback.message, group_info, week, state)
    
    elif action == "export":
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
        await callback.answer("üöß –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@dp.message(StateFilter(GroupSearchStates.entering_group_number))
async def process_group_number(message: Message, state: FSMContext) -> None:
    group_number = message.text.strip()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    loading_msg = await message.answer("‚è≥ –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        group_search_service = GroupSearchService()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        spinner_task = asyncio.create_task(show_loading_spinner(loading_msg, "–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã"))
        
        # –ò—â–µ–º –≥—Ä—É–ø–ø—É
        groups = await group_search_service.search_group_by_number(group_number)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        spinner_task.cancel()
        
        if not groups:
            await loading_msg.edit_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ `{group_number}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_group_search_keyboard()
            )
            await state.set_state(GroupSearchStates.choosing_search_type)
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        group_info = groups[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(current_group_info=group_info)
        await state.set_state(GroupSearchStates.viewing_schedule)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await show_group_schedule(loading_msg, group_info, "current", state)
        
    except Exception as e:
        logger.error(f"Error searching group {group_number}: {e}")
        await loading_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã `{group_number}`.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.",
            reply_markup=get_group_search_keyboard()
        )
        await state.set_state(GroupSearchStates.choosing_search_type)


async def show_group_schedule(message, group_info, week: str, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã."""
    try:
        group_search_service = GroupSearchService()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        semester_info = group_search_service.semester_detector.get_current_semester_info()
        current_week = semester_info.current_week
        
        if week == "current":
            week_number = current_week
        elif week == "prev":
            week_number = max(1, current_week - 1)
        elif week == "next":
            week_number = min(20, current_week + 1)
        else:
            week_number = current_week
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_text = group_search_service.format_group_schedule(group_info, week_number)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
        disclaimer_manager = DisclaimerManager(BASE_DIR / "user_data" / "agreements")
        disclaimer = disclaimer_manager.get_short_disclaimer()
        
        full_text = f"{schedule_text}\n\n{disclaimer}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(full_text) > 4000:
            full_text = full_text[:3900] + "\n\n... (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)\n\n" + disclaimer
        
        keyboard = get_group_result_keyboard(group_info.number)
        
        await message.edit_text(full_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing group schedule: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_group_search_keyboard()
        )


# --- 9. Error handler ---
@dp.error(StateFilter("*"))
async def global_error_handler(
    event: types.ErrorEvent, state: FSMContext
) -> Coroutine[Any, Any, None]:
    exception_info = f"Exception: {event.exception.__class__.__name__}: {event.exception}"
    logger.error(f"Global error!\n{exception_info}")

    target_chat_id = None
    if event.update.message:
        target_chat_id = event.update.message.chat.id
    elif event.update.callback_query and event.update.callback_query.message:
        target_chat_id = event.update.callback_query.message.chat.id

    if target_chat_id:
        try:
            await bot.send_message(
                chat_id=target_chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
            )
        except Exception as e:
            logger.error(f"Could not send error message to user {target_chat_id}: {e}")

    await state.clear()


# --- 10. Main function ---
async def main() -> None:
    """Main async function for bot startup."""
    FILES_DIR.mkdir(exist_ok=True)
    LOGS_DIR.mkdir(exist_ok=True)

    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"Critical error starting bot: {e}")
    finally:
        logger.info("Bot stopped.")


if __name__ == "__main__":
    asyncio.run(main())