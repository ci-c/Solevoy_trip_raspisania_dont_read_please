"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞.
"""

import asyncio
from loguru import logger
from aiogram.types import Message


async def show_loading_spinner(
    message: Message, text_prefix: str = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞", duration: int = 10
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏."""
    spinner_frames = [
        "üïê",
        "üïë",
        "üïí",
        "üïì",
        "üïî",
        "üïï",
        "üïñ",
        "üïó",
        "üïò",
        "üïô",
        "üïö",
        "üïõ",
    ]

    steps = [
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...",
        "–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...",
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
        "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π –∏ —Å–µ–º–∏–Ω–∞—Ä–æ–≤...",
        "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...",
    ]

    frames_per_step = max(1, duration // len(steps))

    for step_idx, step_text in enumerate(steps):
        for i in range(frames_per_step):
            frame = spinner_frames[i % len(spinner_frames)]
            try:
                progress = f"{step_idx + 1}/{len(steps)}"
                await message.edit_text(
                    f"{frame} {text_prefix}\nüìä {progress} | {step_text}"
                )
                await asyncio.sleep(0.5)
            except Exception as e:
                logger.warning(f"Could not update spinner: {e}")
                break


def validate_group_number(group_number: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã."""
    if not group_number:
        return False, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    if len(group_number) > 10:
        return False, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"

    if not any(c.isdigit() for c in group_number):
        return False, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã"

    return True, ""


def truncate_text(
    text: str, max_length: int = 4000, suffix: str = "... (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã."""
    if len(text) <= max_length:
        return text

    return text[: max_length - len(suffix)] + suffix


def format_error_message(error: Exception, context: str = "") -> str:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    error_str = str(error)[:200]

    message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
    if context:
        message += f" –ø—Ä–∏ {context}"

    message += f".\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {error_str}"

    if len(error_str) >= 200:
        message += "..."

    return message


def create_progress_text(current: int, total: int, item_name: str = "—ç–ª–µ–º–µ–Ω—Ç") -> str:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    percentage = int((current / total) * 100) if total > 0 else 0
    progress_bar = "‚ñà" * (percentage // 10) + "‚ñë" * (10 - percentage // 10)

    return (
        f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞: {current}/{total} {item_name}\n[{progress_bar}] {percentage}%"
    )
