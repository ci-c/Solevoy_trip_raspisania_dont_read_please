"""
–ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã.
"""

from typing import Dict
from loguru import logger

from aiogram import types
from aiogram.fsm.context import FSMContext

from app.bot.states import GroupSetupStates
from app.bot.keyboards import get_simple_group_keyboard, get_confirm_keyboard
from app.services.group_service import GroupService
from app.utils.validation import validate_user_input, ValidationError


async def start_group_setup(message: types.Message, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥—Ä—É–ø–ø—ã - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é."""
    try:
        text = (
            "üéì **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        keyboard = get_simple_group_keyboard()
        
        await message.edit_text(text, reply_markup=keyboard)
        await state.set_state(GroupSetupStates.choosing_method)
        
    except Exception as e:
        logger.error(f"Error starting group setup: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä—É–ø–ø—ã.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def handle_group_setup_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã."""
    try:
        action = callback.data.split(":")[1] if ":" in callback.data else callback.data
        
        if action == "enter_manually":
            await show_manual_input(callback.message, state)
        elif action == "select_from_list":
            await show_faculty_list(callback.message, state)
        elif action == "confirm_group":
            await confirm_group_selection(callback.message, state)
        elif action == "cancel":
            await cancel_group_setup(callback.message, state)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error handling group setup callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


async def show_manual_input(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã."""
    try:
        text = (
            "‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã**\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `103–∞`, `204–±`, `301–≤`\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç:\n"
            "‚Ä¢ –§–∞–∫—É–ª—å—Ç–µ—Ç\n"
            "‚Ä¢ –ö—É—Ä—Å\n"
            "‚Ä¢ –ü–æ—Ç–æ–∫\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
        )
        
        try:
            await message.edit_text(text, reply_markup=get_confirm_keyboard("cancel"))
        except Exception:
            await message.answer(text, reply_markup=get_confirm_keyboard("cancel"))
        
        await state.set_state(GroupSetupStates.entering_group_number)
        
    except Exception as e:
        logger.error(f"Error showing manual input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞")


async def show_faculty_list(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤."""
    try:
        from app.services.schedule_service import ScheduleService
        
        schedule_service = ScheduleService()
        faculties = await schedule_service.get_available_faculties()
        
        if not faculties:
            try:
                await message.edit_text(
                    "‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:",
                    reply_markup=get_confirm_keyboard("enter_manually")
                )
            except Exception:
                await message.answer(
                    "‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:",
                    reply_markup=get_confirm_keyboard("enter_manually")
                )
            return
        
        text = "üèõÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:**\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        faculty_buttons = []
        for i, faculty in enumerate(faculties[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            faculty_buttons.append([
                types.InlineKeyboardButton(
                    text=faculty["name"],
                    callback_data=f"group_setup:select_faculty:{faculty['id']}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†—É—á–Ω–æ–π –≤–≤–æ–¥"
        faculty_buttons.append([
            types.InlineKeyboardButton(
                text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                callback_data="group_setup:enter_manually"
            )
        ])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=faculty_buttons)
        
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except Exception:
            await message.answer(text, reply_markup=keyboard)
        
        await state.set_state(GroupSetupStates.selecting_faculty)
        
    except Exception as e:
        logger.error(f"Error showing faculty list: {e}")
        try:
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:",
                reply_markup=get_confirm_keyboard("enter_manually")
            )
        except Exception:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:",
                reply_markup=get_confirm_keyboard("enter_manually")
            )


async def handle_faculty_selection(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
    try:
        faculty_id = int(callback.data.split(":")[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        await state.update_data(selected_faculty_id=faculty_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        text = (
            "‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã**\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `103–∞`, `204–±`, `301–≤`\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç:\n"
            "‚Ä¢ –ö—É—Ä—Å\n"
            "‚Ä¢ –ü–æ—Ç–æ–∫\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
        )
        
        try:
            await callback.message.edit_text(text, reply_markup=get_confirm_keyboard("cancel"))
        except Exception:
            await callback.message.answer(text, reply_markup=get_confirm_keyboard("cancel"))
        
        await state.set_state(GroupSetupStates.entering_group_number)
        
    except Exception as e:
        logger.error(f"Error handling faculty selection: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞", show_alert=True)


async def process_group_input(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    try:
        group_number = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        try:
            validate_user_input(group_number, "group_number")
        except ValidationError as e:
            await message.answer(f"‚ùå {e}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        detected_info = detect_group_info(group_number)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É
        group_service = GroupService()
        group_info = await group_service.find_or_create_group(group_number)
        
        if group_info and isinstance(group_info, dict):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            await group_service.update_group_info(group_info["id"], detected_info)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await show_group_confirmation(message, group_info, detected_info, state)
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É `{group_number}`.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:",
                reply_markup=get_confirm_keyboard("cancel")
            )
            
    except Exception as e:
        logger.error(f"Error processing group input: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã `{group_number}`.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_confirm_keyboard("cancel")
        )


async def show_group_confirmation(
    message: types.Message, 
    group_info: Dict[str, str], 
    detected_info: Dict[str, str], 
    state: FSMContext
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    try:
        group_number = group_info.get("name", group_info.get("number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        faculty = detected_info.get("faculty", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        course = detected_info.get("course", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        stream = detected_info.get("stream", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        speciality = detected_info.get("speciality", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

        text = (
            f"‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã:**\n\n"
            f"üë• **–ì—Ä—É–ø–ø–∞:** {group_number}\n"
            f"üèõÔ∏è **–§–∞–∫—É–ª—å—Ç–µ—Ç:** {faculty}\n"
            f"üìö **–ö—É—Ä—Å:** {course}\n"
            f"üë• **–ü–æ—Ç–æ–∫:** {stream}\n"
            f"üéì **–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:** {speciality}\n\n"
            f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫:\n"
            f"‚Ä¢ üìÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
            f"‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç—É –≤ Excel/iCal\n"
            f"‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
        )

        keyboard = get_confirm_keyboard("confirm_group", "cancel")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            selected_group=group_info, 
            detected_info=detected_info
        )
        await state.set_state(GroupSetupStates.confirming_selection)

        await message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error showing group confirmation: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=get_confirm_keyboard("enter_manually")
        )


async def confirm_group_selection(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã."""
    try:
        data = await state.get_data()
        group_info = data.get("selected_group")
        detected_info = data.get("detected_info")
        
        if not group_info:
            await message.edit_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:",
                reply_markup=get_confirm_keyboard("enter_manually")
            )
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        
        group_number = group_info.get("name", group_info.get("number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        
        text = (
            f"üéâ **–ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"üë• **–í–∞—à–∞ –≥—Ä—É–ø–ø–∞:** {group_number}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ üìÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            f"‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
            f"‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"
        )
        
        await message.edit_text(text)
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error confirming group selection: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_confirm_keyboard("enter_manually")
        )


async def cancel_group_setup(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥—Ä—É–ø–ø—ã."""
    try:
        await state.clear()
        try:
            await message.edit_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /group"
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /group"
            )
        
    except Exception as e:
        logger.error(f"Error canceling group setup: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


def detect_group_info(group_number: str) -> Dict[str, str]:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –ø–æ –Ω–æ–º–µ—Ä—É."""
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    digits = "".join(filter(str.isdigit, group_number))
    
    if len(digits) < 3:
        return {
            "faculty": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
            "course": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", 
            "stream": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
            "speciality": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
        }
    
    # –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ - –∫—É—Ä—Å
    course = int(digits[0])
    
    # –í—Ç–æ—Ä–∞—è –∏ —Ç—Ä–µ—Ç—å—è —Ü–∏—Ñ—Ä—ã - –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –Ω–∞ –∫—É—Ä—Å–µ
    group_num = int(digits[1:3]) if len(digits) >= 3 else 0
    
    # –ë—É–∫–≤–∞ –ø–æ—Ç–æ–∫–∞
    stream_letter = "".join(filter(str.isalpha, group_number.lower()))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã
    faculty_map = {
        (1, 100): "–ú–µ–¥–∏–∫–æ-–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
        (2, 200): "–õ–µ—á–µ–±–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", 
        (3, 300): "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
        (4, 400): "–ú–µ–¥–∏–∫–æ-–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
        (5, 500): "–§–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ—Å—Ç–¥–∏–ø–ª–æ–º–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
    }
    
    faculty = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    for (course_key, group_key), faculty_name in faculty_map.items():
        if course == course_key or (group_num >= group_key and group_num < group_key + 100):
            faculty = faculty_name
            break
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
    speciality_map = {
        "–ú–µ–¥–∏–∫–æ-–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç": "–ú–µ–¥–∏–∫–æ-–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–ª–æ",
        "–õ–µ—á–µ–±–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç": "–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ",
        "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", 
        "–ú–µ–¥–∏–∫–æ-–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –±–∏–æ—Ñ–∏–∑–∏–∫–∞",
        "–§–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ—Å—Ç–¥–∏–ø–ª–æ–º–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è": "–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞/–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞",
    }
    
    speciality = speciality_map.get(faculty, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–æ–∫ –ø–æ –±—É–∫–≤–µ
    stream_map = {"–∞": "–ê", "–±": "–ë", "–≤": "–í", "–≥": "–ì", "": "–û—Å–Ω–æ–≤–Ω–æ–π"}
    stream = stream_map.get(stream_letter, stream_letter.upper() if stream_letter else "–û—Å–Ω–æ–≤–Ω–æ–π")
    
    return {
        "faculty": faculty,
        "course": course,
        "stream": stream,
        "speciality": speciality,
    }


async def register_group_setup_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã."""
    from aiogram.filters import StateFilter
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(
        handle_group_setup_callback,
        lambda c: c.data.startswith("group_setup:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    dp.callback_query.register(
        handle_faculty_selection,
        lambda c: c.data.startswith("group_setup:select_faculty:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
    dp.message.register(
        process_group_input,
        StateFilter(GroupSetupStates.entering_group_number)
    )
