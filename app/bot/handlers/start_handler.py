"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –±–∞–∑–æ–≤–æ–≥–æ –º–µ–Ω—é.
"""

from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.bot.keyboards import get_main_menu_keyboard
from app.bot.states import MainMenu
from app.services.user_service import UserService


async def cmd_start(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not message.from_user:
        logger.info("Unknown user started the bot")
        await message.answer("Error: Could not identify user.")
        return

    logger.info(f"User {message.from_user.id} started the bot")
    await state.clear()

    try:
        user_service = UserService()

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        if not user:
            user = await user_service.create_user(
                telegram_id=message.from_user.id,
                telegram_username=message.from_user.username,
                full_name=message.from_user.full_name,
            )
            logger.info(f"Created new user: {user.id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await user_service.update_user_activity(user.id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        user_profile = await user_service.get_user_profile(user.id)

        await state.set_state(MainMenu.home)

        if user_profile:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n\n"
                f"üéì –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: –ì—Ä—É–ø–ø–∞ {user_profile.group_id}\n\n"
                f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=get_main_menu_keyboard(user),
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–ó–ì–ú–£ Schedule Bot!\n\n"
                "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π, –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º:",
                reply_markup=get_main_menu_keyboard(),
            )

    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    logger.info(f"User {message.from_user.id} cancelled action")
    await state.clear()
    await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start")


async def register_start_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ä—Ç–∞."""
    dp.message.register(cmd_start, Command("start", "help"))
    dp.message.register(cmd_cancel, Command("cancel"))
