"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.
"""

import asyncio
from typing import Any
from aiogram import Dispatcher, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from ..callbacks import GroupSearchCallback, MenuCallback
from ..keyboards import get_group_search_keyboard, get_group_result_keyboard, get_error_keyboard
from ..states import GroupSearchStates
from ..utils import show_loading_spinner, validate_group_number, format_error_message
from ...schedule.group_search import GroupSearchService
from ...schedule.semester_detector import SemesterDetector


async def handle_group_search(callback: types.CallbackQuery, callback_data: GroupSearchCallback, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø."""
    await callback.answer()
    action = callback_data.action
    
    if action == "quick_search":
        await state.set_state(GroupSearchStates.entering_group_number)
        
        try:
            semester_detector = SemesterDetector()
            current_semester = semester_detector.get_semester_display_text()
        except Exception as e:
            logger.warning(f"Failed to get semester info: {e}")
            current_semester = "–û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä 2024/2025"
        
        await callback.message.edit_text(
            f"üîç **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã**\n\n"
            f"üìÖ {current_semester}\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n"
            f"–ü—Ä–∏–º–µ—Ä—ã: `103–∞`, `204–±`, `301–≤`",
            reply_markup=get_error_keyboard()
        )
    
    elif action == "detailed_search":
        await callback.message.edit_text(
            "üìä **–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫**\n\n"
            "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
            "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã.",
            reply_markup=get_group_search_keyboard()
        )
    
    elif action == "show_schedule":
        week = callback_data.week
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        group_info = data.get('current_group_info')
        
        if not group_info:
            await callback.message.edit_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_group_search_keyboard()
            )
            return
        
        await show_group_schedule_safe(callback.message, group_info, week, state)
    
    elif action == "export":
        await callback.answer("üöß –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


async def process_group_number(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    group_number = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    is_valid, error_msg = validate_group_number(group_number)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 103–∞, 204–±):",
            reply_markup=get_error_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    loading_msg = await message.answer("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞
        group_search_service = GroupSearchService()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∏ —Å–ø–∏–Ω–Ω–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        search_task = asyncio.create_task(
            group_search_service.search_group_by_number(group_number)
        )
        spinner_task = asyncio.create_task(
            show_loading_spinner(loading_msg, f"–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã {group_number}", 15)
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
        try:
            groups = await asyncio.wait_for(search_task, timeout=35.0)
            spinner_task.cancel()
            
        except asyncio.TimeoutError:
            spinner_task.cancel()
            await loading_msg.edit_text(
                f"‚è±Ô∏è –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã `{group_number}` –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –°–ó–ì–ú–£\n"
                f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.",
                reply_markup=get_group_search_keyboard()
            )
            await state.set_state(GroupSearchStates.choosing_search_type)
            return
            
        except Exception as search_error:
            spinner_task.cancel()
            logger.error(f"Search task failed: {search_error}")
            raise search_error
        
        if not groups:
            await loading_msg.edit_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ `{group_number}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"üîç **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–º–µ—Å—Ç—Ä–µ\n"
                f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –°–ó–ì–ú–£\n\n"
                f"üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç (103–∞ –≤–º–µ—Å—Ç–æ 103–ê)\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ–∑–∂–µ",
                reply_markup=get_group_search_keyboard()
            )
            await state.set_state(GroupSearchStates.choosing_search_type)
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        group_info = groups[0]
        logger.info(f"Found group: {group_info.number}, speciality: {group_info.speciality}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(current_group_info=group_info)
        await state.set_state(GroupSearchStates.viewing_schedule)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await show_group_schedule_safe(loading_msg, group_info, "current", state)
        
    except Exception as e:
        logger.error(f"Critical error searching group {group_number}: {e}")
        
        error_message = format_error_message(e, "–ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã")
        error_message += f"\n\n–ì—Ä—É–ø–ø–∞: `{group_number}`\n\n"
        error_message += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        error_message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        error_message += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
        error_message += f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        
        try:
            await loading_msg.edit_text(error_message, reply_markup=get_group_search_keyboard())
        except Exception as edit_error:
            logger.error(f"Could not edit error message: {edit_error}")
            await message.answer(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
        
        await state.set_state(GroupSearchStates.choosing_search_type)


async def show_group_schedule_safe(message: Any, group_info: Any, week: str, state: FSMContext) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    try:
        from ...schedule.group_search import GroupSearchService
        from ...utils.disclaimer import DisclaimerManager
        from pathlib import Path
        
        group_search_service = GroupSearchService()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            semester_info = group_search_service.semester_detector.get_current_semester_info()
            current_week = semester_info.current_week
        except Exception as e:
            logger.warning(f"Failed to get semester info: {e}, using default week")
            current_week = 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        if week == "current":
            week_number = current_week
        elif week == "prev":
            week_number = max(1, current_week - 1)
        elif week == "next":
            week_number = min(20, current_week + 1)
        else:
            week_number = current_week
        
        logger.info(f"Showing schedule for group {group_info.number}, week {week_number}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            schedule_text = group_search_service.format_group_schedule(group_info, week_number)
            
            if not schedule_text or schedule_text.strip() == "":
                schedule_text = (
                    f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_info.number}**\n\n"
                    f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week_number}.\n\n"
                    f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –Ω–µ–¥–µ–ª—é –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫."
                )
                
        except Exception as e:
            logger.error(f"Error formatting schedule: {e}")
            schedule_text = (
                f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_info.number}**\n\n"
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)[:150]}..."
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
        disclaimer = "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π. –£—Ç–æ—á–Ω—è–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
        full_text = f"{schedule_text}\n\n{disclaimer}"
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(full_text) > 4000:
            available_length = 4000 - len(disclaimer) - 50
            truncated_schedule = schedule_text[:available_length] + "\n\n... (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
            full_text = f"{truncated_schedule}\n\n{disclaimer}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_group_result_keyboard(group_info.number)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.edit_text(full_text, reply_markup=keyboard)
            logger.info(f"Successfully displayed schedule for group {group_info.number}")
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")
            await message.answer(full_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Critical error showing group schedule: {e}")
        
        error_text = (
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
            f"–ì—Ä—É–ø–ø–∞: {getattr(group_info, 'number', 'Unknown')}\n"
            f"–û—à–∏–±–∫–∞: {str(e)[:200]}...\n\n"
            f"üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
            f"‚Ä¢ –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã\n"
            f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ\n"
            f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        
        try:
            await message.edit_text(error_text, reply_markup=get_group_search_keyboard())
        except Exception:
            await message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")


async def register_group_search_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø."""
    dp.callback_query.register(
        handle_group_search,
        GroupSearchCallback.filter()
    )
    
    dp.message.register(
        process_group_number,
        StateFilter(GroupSearchStates.entering_group_number)
    )