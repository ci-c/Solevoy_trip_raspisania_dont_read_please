"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
"""

from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.bot.callbacks import MenuCallback
from app.bot.keyboards import get_main_menu_keyboard, get_group_search_keyboard
from app.bot.states import GroupSearchStates
from app.services.user_service import UserService
from app.utils.logger import log_user_action


async def handle_menu(
    callback: types.CallbackQuery, callback_data: MenuCallback, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await callback.answer()
    action = callback_data.action

    log_user_action(
        user_id=callback.from_user.id,
        action=f"menu_{action}",
        details={"callback_data": callback_data.model_dump()},
    )

    try:
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)

        if action == "home":
            await callback.message.edit_text(
                f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "setup_profile":
            await callback.message.edit_text(
                "üéì **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "my_schedule":
            if not user or not hasattr(user, "profile") or not user.profile:
                await callback.message.edit_text(
                    "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                    '–ù–∞–∂–º–∏—Ç–µ "üéì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
                    reply_markup=get_main_menu_keyboard(user),
                )
                return

            await callback.message.edit_text(
                "üìÖ **–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "search_group":
            await state.set_state(GroupSearchStates.choosing_search_type)
            await callback.message.edit_text(
                "üë• **–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=get_group_search_keyboard(),
            )

        elif action == "search":
            await callback.message.edit_text(
                "üîç **–†–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
                "üöß –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏...\n"
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üë• –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É" –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.',
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "applications":
            await callback.message.edit_text(
                "üìù **–ó–∞—è–≤–ª–µ–Ω–∏—è**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "diary":
            await callback.message.edit_text(
                "üìä **–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "attestation":
            await callback.message.edit_text(
                "üìö **–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "grades":
            await callback.message.edit_text(
                "üî¢ **–ú–æ–∏ –æ—Ü–µ–Ω–∫–∏ (–û–°–ë/–ö–ù–õ/–ö–ù–°)**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ü–µ–Ω–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –°–ó–ì–ú–£.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "reminders":
            await callback.message.edit_text(
                "üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö –∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "settings":
            await callback.message.edit_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
                "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard(user),
            )

        elif action == "retry":
            await callback.message.edit_text(
                "üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_main_menu_keyboard(user),
            )

        else:
            logger.warning(f"Unknown menu action: {action}")
            await callback.message.edit_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard(user),
            )

    except Exception as e:
        logger.error(f"Error in menu handler: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
            reply_markup=get_main_menu_keyboard(None),
        )


async def register_menu_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é."""
    dp.callback_query.register(handle_menu, MenuCallback.filter())
