"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–µ–∑ –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.
"""

from typing import List, Optional
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.bot.callbacks import MenuCallback
from app.bot.keyboards import get_main_menu_keyboard, get_group_selection_keyboard
from app.services.user_service import UserService
from app.services.schedule_service import ScheduleService


async def handle_menu_action(
    callback: types.CallbackQuery, callback_data: MenuCallback, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await callback.answer()
    action = callback_data.action
    user_id = callback.from_user.id

    try:
        user_service = UserService()
        user_profile = await user_service.get_user_profile(user_id)

        if action == "home":
            await show_main_menu(callback.message, user_profile)

        elif action == "select_group":
            await show_group_selection(callback.message, state)

        elif action == "my_schedule":
            if user_profile:
                await show_user_schedule(callback.message, user_profile, state)
            else:
                await callback.message.edit_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å - –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!",
                    reply_markup=get_main_menu_keyboard(),
                )

        elif action == "export":
            if user_profile:
                await handle_export_schedule(callback.message, user_profile, state)
            else:
                await callback.message.edit_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å - –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!",
                    reply_markup=get_main_menu_keyboard(),
                )

        elif action == "settings":
            await show_settings_menu(callback.message, user_profile)

        else:
            # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await callback.message.edit_text(
                f"üöß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
                "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel/iCal\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è",
                reply_markup=get_main_menu_keyboard(user_profile),
            )

    except Exception as e:
        logger.error(f"Error handling menu action {action}: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(),
        )


async def show_main_menu(
    message: types.Message, user_profile: Optional[dict] = None
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if user_profile:
        group_info = user_profile.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        text = (
            f"üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
            f"üë§ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: **{group_info}**\n\n"
            f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:"
        )
    else:
        text = (
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –°–ó–ì–ú–£!**\n\n"
            "üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É.\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –∫—É—Ä—Å –∏ –ø–æ—Ç–æ–∫."
        )

    keyboard = get_main_menu_keyboard(user_profile)

    try:
        await message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await message.answer(text, reply_markup=keyboard)


async def show_group_selection(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–∑ –ë–î
        from app.services.schedule_service import ScheduleService
        schedule_service = ScheduleService()
        faculties_data = await schedule_service.get_available_faculties()
        faculties = [faculty["name"] for faculty in faculties_data]

        if faculties:
            text = (
                "üèõÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:**\n\n"
                "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫—É—Ä—Å –∏ –ø–æ—Ç–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã."
            )
            keyboard = get_group_selection_keyboard(faculties)
        else:
            text = (
                "‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:**\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: `103–∞`, `204–±`, `301–≤`\n\n"
                "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç:\n"
                "‚Ä¢ –§–∞–∫—É–ª—å—Ç–µ—Ç\n"
                "‚Ä¢ –ö—É—Ä—Å\n"
                "‚Ä¢ –ü–æ—Ç–æ–∫"
            )
            keyboard = get_group_selection_keyboard()

        await message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error showing group selection: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é:",
            reply_markup=get_group_selection_keyboard(),
        )


async def show_user_schedule(
    message: types.Message, user_profile: dict, state: FSMContext
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
    try:
        schedule_service = ScheduleService()
        user_id = user_profile["user_id"]

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        from datetime import date, timedelta

        today = date.today()
        week_start = today - timedelta(days=today.weekday())
        week_end = week_start + timedelta(days=6)

        schedule = await schedule_service.get_user_schedule(
            user_id, week_start, week_end
        )

        if schedule:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_text = format_user_schedule(schedule, user_profile["group_name"])
        else:
            schedule_text = (
                f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {user_profile['group_name']}**\n\n"
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.\n\n"
                "üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ –Ω–µ—Ç - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
        disclaimer = "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π. –£—Ç–æ—á–Ω—è–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
        full_text = f"{schedule_text}\n\n{disclaimer}"

        await message.edit_text(
            full_text, reply_markup=get_main_menu_keyboard(user_profile)
        )

    except Exception as e:
        logger.error(f"Error showing user schedule: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=get_main_menu_keyboard(user_profile),
        )


async def handle_export_schedule(
    message: types.Message, user_profile: dict, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await message.edit_text(
        f"üìä **–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {user_profile['group_name']}**\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ üìë Excel (.xlsx)\n"
        "‚Ä¢ üìÖ iCalendar (.ics)\n"
        "‚Ä¢ üì± Google Calendar\n"
        "‚Ä¢ üîó –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞",
        reply_markup=get_main_menu_keyboard(user_profile),
    )


async def show_settings_menu(
    message: types.Message, user_profile: Optional[dict]
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if user_profile:
        text = (
            f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
            f"üë§ –ì—Ä—É–ø–ø–∞: {user_profile['group_name']}\n"
            f"üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: {user_profile.get('faculty', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìö –ö—É—Ä—Å: {user_profile.get('course', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            "üöß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        )
    else:
        text = "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å - –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!"

    await message.edit_text(text, reply_markup=get_main_menu_keyboard(user_profile))


def format_user_schedule(schedule: List[dict], group_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not schedule:
        return f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name}**\n\n–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é."

    text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name}**\n\n"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    days_schedule = {}
    for lesson in schedule:
        day = lesson["day_of_week"]
        if day not in days_schedule:
            days_schedule[day] = []
        days_schedule[day].append(lesson)

    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    day_names = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫",
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞",
        7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }

    for day_num in sorted(days_schedule.keys()):
        day_name = day_names.get(day_num, f"–î–µ–Ω—å {day_num}")
        text += f"üìò **{day_name}**\n"

        for lesson in sorted(days_schedule[day_num], key=lambda x: x["lesson_number"]):
            time_info = ""
            if lesson.get("start_time") and lesson.get("end_time"):
                time_info = f" ({lesson['start_time']}-{lesson['end_time']})"

            room_info = ""
            if lesson.get("room_number"):
                room_info = f" ‚Ä¢ {lesson['room_number']}"
                if lesson.get("building"):
                    room_info += f" ({lesson['building']})"

            text += (
                f"{lesson['lesson_number']}.{time_info} **{lesson['subject_name']}**\n"
                f"   {lesson.get('lesson_type', '–ó–∞–Ω—è—Ç–∏–µ')} ‚Ä¢ {lesson.get('teacher_name', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω')}{room_info}\n"
            )

        text += "\n"

    return text.strip()


async def register_simplified_menu_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é."""
    dp.callback_query.register(handle_menu_action, MenuCallback.filter())
