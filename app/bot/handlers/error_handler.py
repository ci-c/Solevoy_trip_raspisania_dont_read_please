"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å —É—Ä–æ–≤–Ω—è–º–∏ –¥–æ—Å—Ç—É–ø–∞.
"""

from aiogram import Dispatcher, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from ...services.user_service import UserService
from ...utils.logger import get_error_details_for_user, log_security_event
from ...models.user import AccessLevel
from ..keyboards import get_error_keyboard


async def global_error_handler(event: types.ErrorEvent, state: FSMContext) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    exception = event.exception
    update = event.update

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = None
    chat_id = None

    if update.message:
        user_id = update.message.from_user.id
        chat_id = update.message.chat.id
    elif update.callback_query and update.callback_query.from_user:
        user_id = update.callback_query.from_user.id
        chat_id = update.callback_query.message.chat.id

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error(
        f"Global error for user {user_id}: {type(exception).__name__}: {exception}"
    )

    if not chat_id:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        user_service = UserService()
        user = None
        access_level = AccessLevel.GUEST

        if user_id:
            try:
                user = await user_service.get_user_by_telegram_id(user_id)
                if user:
                    access_level = AccessLevel(user.access_level)
            except Exception as e:
                logger.warning(f"Could not get user info for error handler: {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if isinstance(exception, (PermissionError, ValueError, KeyError)):
            log_security_event(
                user_id or 0,
                access_level,
                "CRITICAL_ERROR",
                f"{type(exception).__name__}: {str(exception)[:100]}",
            )

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        error_message = get_error_details_for_user(exception, access_level)

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if access_level in [AccessLevel.ADMIN, AccessLevel.TESTER]:
            error_message = f"‚ö†Ô∏è **–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n{error_message}"
        else:
            error_message = f"‚ùå {error_message}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot = event.bot

        await bot.send_message(
            chat_id=chat_id,
            text=error_message,
            reply_markup=get_error_keyboard()
            if access_level != AccessLevel.GUEST
            else None,
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if isinstance(exception, (RuntimeError, MemoryError, ConnectionError)):
            await state.clear()
            logger.info(f"Cleared state for user {user_id} due to critical error")

    except Exception as handler_error:
        logger.critical(f"Error in error handler: {handler_error}")

        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot = event.bot
            await bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
            )
        except Exception:
            logger.critical("Could not send any error message to user")


async def handle_timeout_error(message: types.Message, error: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç–∞–π–º-–∞—É—Ç–∞."""
    logger.warning(f"Timeout error for user {message.from_user.id}: {error}")

    await message.answer(
        "‚è±Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è**\n\n"
        "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
        "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
        reply_markup=get_error_keyboard(),
    )


async def handle_api_error(message: types.Message, error: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API."""
    logger.error(f"API error for user {message.from_user.id}: {error}")

    await message.answer(
        "üîå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –°–ó–ì–ú–£**\n\n"
        "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n\n"
        "üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –°–ó–ì–ú–£\n"
        "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        reply_markup=get_error_keyboard(),
    )


async def handle_database_error(message: types.Message, error: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.error(f"Database error for user {message.from_user.id}: {error}")

    await message.answer(
        "üíæ **–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑.",
        reply_markup=get_error_keyboard(),
    )


async def register_error_handler(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫."""
    dp.error.register(global_error_handler, StateFilter("*"))
